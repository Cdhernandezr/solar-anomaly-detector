# api/main.py

import sys
import io
import torch
from fastapi import FastAPI, UploadFile, File
from PIL import Image

# --- Configuraci√≥n de M√≥dulos ---
# Esto es crucial para que Python encuentre tus m√≥dulos en la carpeta src/
# A√±adimos el directorio ra√≠z del proyecto al path del sistema
sys.path.append('..')
from src.models import ThermalNet
from src.data_utils import DataTransforms

# --- Inicializaci√≥n de la Aplicaci√≥n y el Modelo ---

app = FastAPI(
    title="API de Detecci√≥n de Anomal√≠as en Paneles Solares",
    description="Una API para clasificar im√°genes termogr√°ficas de paneles solares como 'Normal' o 'Defectuoso'.",
    version="1.0.0"
)

# Cargamos el modelo UNA SOLA VEZ cuando la aplicaci√≥n se inicia.
# Esto es una optimizaci√≥n clave para que la API sea r√°pida.
try:
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = ThermalNet(num_classes=2)
    
    # Ruta relativa al modelo desde la carpeta ra√≠z del proyecto
    model_path = "models/ThermalNet_best_model.pth"
    
    model.load_state_dict(torch.load(model_path, map_location=device)['model_state_dict'])
    model.to(device)
    model.eval() # Ponemos el modelo en modo de evaluaci√≥n

    # Obtenemos las transformaciones de validaci√≥n (deben ser las mismas que en el entrenamiento)
    val_transforms = DataTransforms.get_val_transforms()
    
    print("‚úÖ Modelo y transformaciones cargados exitosamente.")

except FileNotFoundError:
    print(f"‚ùå ERROR: No se encontr√≥ el archivo del modelo en '{model_path}'.")
    print("Aseg√∫rate de haber ejecutado el script de entrenamiento primero (python -m src.train).")
    model = None


# --- Definici√≥n de los Endpoints de la API ---

@app.get("/", tags=["General"])
def read_root():
    """Endpoint ra√≠z para verificar que la API est√° funcionando."""
    return {"status": "OK", "message": "API activa. Visita /docs para la documentaci√≥n interactiva."}


@app.post("/predict", tags=["Predicciones"])
async def predict(image_file: UploadFile = File(...)):
    """
    Recibe una imagen (üñºÔ∏è), la procesa y devuelve la predicci√≥n del modelo.
    """
    if not model:
        return {"error": "El modelo no est√° cargado. Revisa los logs del servidor."}

    # 1. Leer el contenido del archivo de imagen en memoria
    contents = await image_file.read()
    image = Image.open(io.BytesIO(contents)).convert("L")  # Convertir a escala de grises

    # 2. Aplicar las mismas transformaciones que en la validaci√≥n
    image_tensor = val_transforms(image).unsqueeze(0)
    image_tensor = image_tensor.to(device)

    # 3. Realizar la predicci√≥n
    with torch.no_grad(): # Desactivamos el c√°lculo de gradientes para la inferencia
        output = model(image_tensor)
        probabilities = torch.nn.functional.softmax(output, dim=1)
        prediction_idx = torch.argmax(probabilities, dim=1).item()
        confidence = probabilities.max().item()

    label_map = {0: 'Normal', 1: 'Defectuoso'}
    
    # 4. Devolver un resultado claro en formato JSON
    return {
        "filename": image_file.filename,
        "predicted_class": label_map[prediction_idx],
        "confidence": f"{confidence:.4f}"
    }